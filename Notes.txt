Environment Setup and Check:
----------------------------
1. For setting up the Environment Variables set the class path where the paths are as follows:
	(i)C:\Program Files\Java\jdk1.8.0_91\bin -- here the java compiler "javac" is available 
	(ii)C:\Program Files\Java\jdk1.8.0_91\jre -- here the java runtime environment "java" is available
	
	Set these paths using semicoln as seperator for CLASSPATH variable as below:
	=>	C:\Program Files\Java\jdk1.8.0_91\bin;C:\Program Files\Java\jdk1.8.0_91\jre;.
	The "." at last denotes your working directory, so that the compiler and jre will find where your programs are.
	
	To be safe you can also append the above line to the end of your PATH variable using semicoln as a seperator.
	
For more details on setting environment variables visit http://www.ecs.umass.edu/ece/ece122/help/setenvironment.htm

2. To check the correct installation of java one can run the following command in command prompt(cmd):
	java -version
	
	This command with return the installed java version along with the Runtime Environment and Virtual Machine details.
	If the java is not installed properly then some error stating java is not recognized as an external or internal command.
	
3. Firstly I personally suggest every beginer to write program some editor so as to get familir and get hands on with the java syntax, as IDE(Integrated Development Environment) provide intellisense which make you dependent on it.

4. Write a simple first program to print your name. Make sure you save the file with the name of the main class(case sensetive)and the extension as .java .[Refer FirstProgram.java ]

5. Compile the program in cmd using the command : javac <filename.java>
	This command will create the .class file in same folder where your java program file resides only if there is no error in your program file.

6. .class is the compled file which is bytecode and it can be executed on any OS.

7. Once the bytecode is generated (.class file) then run the program using the command: java <filename>
	Here the filename do not contain any extension like .java or .class
	
	When this command is run it takes .class file to execute it.
	
8. Now create another file with and write the same program but change the name of the main class and also create the package. [Refer FirstProgramWithPackage.java]
	Compile the file using command: javac -d . <filename.java>
	After compiling the java program file it will generate the bytecode in package(the folder structure).
	At last execute the program using bytecode using command: java <package.filename> [e.g java com.abc.filename]
	
JDK, JRE & JVM:
---------------
1. JDK(Java Development Kit): It cotains everything that will be required to develop and run the Java application.

2. JRE(Java Runtime Environment): It contains everything that is required to run the java application which is been complied.
	It does not contain the code library required to develop the Java Application.

3. JVM(Java virtual Machine): It works on top of Operating System and provide the environment to execute the compiled java code. It uses the bytecode to run the application. It needs the java code library to run the application.

JDE = JRE + required library to develop the java application
JRE = JVM + required library to run the application

4. Java is portable because:
	Java Source Code is Machine Neutral.[Written by developer]
	Compiled Code/Byte Code is Machine Neutral.[Compiled by javac]
	Byte code execute is Machine Specific.[Executed by JVM]
	
	JVM reads the bytecode and generate the machine specific code. So the JVM is different for different types of machines. And therby, JVM takes care of portablity.

Java Class & Object:
--------------------
1. The Class is the template for creating the objects which have state and behaviour. In return class have field and method to define the state and behaviour of its object.

SYNTAX: <access_modifier> class <class_name> extends <super_class_name> implements <interface_name>{
			<static_initializer_block>
			<ananymous_block>
			<constructor_declaration>
			<field_declaration (static or non-static)>
			<method_declaration (static or non-static>
			<inner_class_declaration>
			<nested_interface_declaration>
			<variables_inside_class (static or non-static)>
		}

access_modifier: It define who in the Java World can access this class and members of the class.
class_name: It is the unique name for the class in specific package.
super_class_name: It is the name of the class which given class extends.
interface_name: It is the name of an interface which the given class implements.

2. Thumb Rules for Class:
	There can be only one public class per source code file but can have multiple non-public classes.
	In case there is any public class in source code file, then the file name must be same as that of public class name.
	Files with no public class can have any name for the class.
	Import and Package statements should be applied to all the classes in the same source code file.

3. Object: It implements the state and behaviour of class in the form of variables and methods, and requies some memory allocated.

SYNTAX: <class_name> ClassObjectReference  = new <class_name>();
	Here the constructor of Class(class_name) will be executed and an object will be created(ClassObjectReference will hold the refernce of the created object in the memory).

As a whole, Class is the creation of the prototype and the Object is the actual implementation of that prototype.

4. The member of the class is accessed by naming the Object followed by a period (dot), followed by the name of the method and the argument list.

SYNTAX: ClassObjectReference.member

5. Class can have only public or default access modifiers.

6. A public class can be seen by all classes from all packages.

7. A class with default access can be seen only by classes within the same package.

8. A class can also have final, abstract and strictpf non-access modifiers.

9. An Abstract Class can not be instantiated.

10. A Final class can not be subclassed.

11. A class can not be both final and abstract.

Constructors in Java [Refer CoreJavaExamples Project]:
---------------------
1. Constructors have only 1 purpose, to create instance of a class.

2. Instantiation includes: (1) memory allocation & (2) meber initialization (This is optional).

3. Methods cannot be used to create an instance of a class.

4. Constructor name needs to be same as that of the class name.

5. Constructor do not contain any return value.

6. Methods have return type alond with non-access modifier(e.g. staic).

7. Methods require return type(e.g. void).

8. As per java naming convention, method name should be camelCase where as that of constructor name should start with capital letter.

9. The method can have same name as that of class and can be distinguised for constructor by looking into its signature which contains the return type and non-access modifier(if present any).

10. Constructors can be called explicitly, but will be invoked when the instance of class is generated using "new" keyword.

11. Java provides the default constructor, which is invoked when no constructor is explicitly provided. This constructor do not contain any parameter nor it does any initiaization or any special action.

12. Constructor can not be static, Final, abstract or overridden.

13. Any attempt to call default consructor will lead to compile time error, if an explicit default constructor is not provided.

14. If a class defines an explicit constructor, it no longer has default constructor to set the state of Objects.

15. Every constructor calls it Superclass consructor.

Constructor Overloading:
------------------------
1. All the constructors have same name but they differ in the parameter list. This is constructor overloading.

2. To implement the local chaining of constructor, this() construct is used.

3. this() call in constructor invokes the other constructor with the corresponding parameter list within the same class.

4. this() must be the first statement in the constructor.

Constructor Chaining:
---------------------
1. super() invokes the constructor of the super class. If explicitly called then it must be the first statement in the constructor.

2. As every consructor call its Superclass consructor, an implied super() is therefore not included in each const which does not include either this() or an explicit super() call as the  first statement.

3. The explicit super allows parameter values to be passed to the Constructor of its superclass and must have matching parameter types. A super() call in the constructor of a subclass will result in the call of the relevant constructor from the superclass, based on the signature of the call. This is called constructor chaining.

4. If a constructor has neither a this() nor a super() construct as its first statement, then a super() call to the default constructor in the superclass is inserted.

5. The this() construct leads to chaining of constructors in the same class, the super() construct leads to chaining of subclass constructors to Superclass Constructors

6. If a class only defines non-default constructors, then its subclasses will not include an implicit super() call. This will be flagged as a compile-time error.

Variables:
----------
1. Object store their state in variables.

2. Variables are the containers that hold values during the life cycle of an application.

SYNTAX: [<access_modifier>][<non-access_modifier>] <data_type> name_of_variable [= <some_initial_value>];

3. Primitive Data Types: byte, short, int, long, float, double, char, boolean

4. The Wrapper classes corresponding to primitive data types is also available.

5. Variables can be defined anywhere in the code and can have any access modifiers.

Variable Types[VariablesExample.java]: 
---------------
1. Instance Variable: The variables which are defined without STATIC keyword and are outside any method declaration are object specific and are known as Instance variables.
						Values of these variables are NOT shared among instances.
						These variables can only be accessed by object of class only.
						
2. Static Variable(Class Variable): The variables which are defined with STATIC keyword inside a class but outside any method and are defined outside any method declaration are know as static variables.
					The values of thses variables are not specific to any instance but are common to all instances of the class. So, they will be shared by all instances of an object.
					Thses variables can be accessed via object of the class or via class name.
					
3. Local Variable(Method Local Variable): The variables which are defined inside any method in a class are called Local Variables.
					The only modifier that can be applied on these variables is FINAL.
					These variables needs to be initialized before they can be used else it will retirn into compiletime error.
					
4. Method Parameter: Parameters are variables that are passed in method.

Local Variables:
----------------
1. Local Variables cananot have any Access Level as their scope is limited to the method in which it is declared.

2. Local variables can have only one non-access modifer, final.

3. Local variables need to be initialized, they can not have default value.

Instance Variable:
------------------
1. Instance variable can use any of the four access modifiers.

2. They can be marked final and transient.

3. Thet cannot be marked abstract, synchronized, strictfp, native or static.

Transient Keyword:
------------------
1. Transient keyword can only be applied to fields or member variable. Applying it to method or local variable is compilation error.

2. Another important point is that you can declare an variable static and transient at same time and java compiler doesn't complain but doing that doesn't make any sense because transient is to instruct "do not save this field" and static variables are not saved anyway during serialization.

3. In similar way you can apply transient and final keyword together to a variable compiler will not complain but you will face another problem of reinitializing a final variable during deserialization.

4. Transient variable in java is not persisted or saved when an object gets serialized.

public static void main(string args[]) Explanation:
---------------------------------------------------
1. 

*******************
Serialization is a process by which object's state is saved by JVM and during deserialization it’s recovered by JVM. During Serialization all property of object gets saved except static and transient.

*******************************************Things to understand in detail*************************
1. System.out.println
